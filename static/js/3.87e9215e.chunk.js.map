{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","statusValue","setStatus","useEffect","onChange","e","currentTarget","value","onBlur","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","className","classes","profileFormFields","createField","Input","Textarea","style","display","alignSelf","marginTop","opacity","width","undefined","type","Object","keys","contacts","map","key","marginBottom","flexDirection","Button","height","Contacts","contactTitle","contactValue","ProfileData","textTransform","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","isOwner","savePhoto","changeProfile","profilePage","alt","src","photos","small","userPhoto","profileInfo","profileName","fullName","marginRight","file_upload","target","files","length","onClick","formData","initialValues","Preloader","Post","message","publishedTime","post","required","MyPosts","React","memo","addNewPost","PostsElements","useSelector","PostsData","id","posts","formPost","newPostText","Profile","compose","withRouter","userId","match","params","myUserId","dispatch","useDispatch","refreshProfile","useCallback","currentUserId","getProfileTC","getStatusTC","actions","addPost","file","savePhotoTC","saveProfileTC","updateStatusTC"],"mappings":"2MAKIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAOhB,SAASE,EAAsBC,GAOlC,OAAOC,YAAQN,EAARM,EANqC,SAACC,GAAW,IAC7CL,EAAwBK,EAAxBL,OAAWM,EADiC,YACpBD,EADoB,YAEnD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,oBCf1CC,EAAOC,QAAU,CAAC,YAAc,iCAAiC,YAAc,iCAAiC,YAAc,iCAAiC,QAAU,6BAA6B,YAAc,iCAAiC,kBAAoB,yC,oBCAzQD,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,SAAW,4B,oBCA5DD,EAAOC,QAAU,CAAC,KAAO,qB,uGCwCVC,EAlC+B,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aAAkB,EAExCC,oBAAS,GAF+B,mBAEjEC,EAFiE,KAEvDC,EAFuD,OAGvCF,mBAASF,GAH8B,mBAGjEK,EAHiE,KAGpDC,EAHoD,KAKtEC,qBAAW,WACPD,EAAUN,KACX,CAACA,IAiBJ,OACI,8BACMG,EACI,uBAAOK,SAPA,SAACC,GAClBH,EAAUG,EAAEC,cAAcC,QAMiBC,OAdtB,WACrBR,GAAY,GACRH,GACAA,EAAaI,IAWsDQ,WAAW,EAAMF,MAAON,IACrF,sBAAMS,cAnBG,WACnBV,GAAY,IAkBF,SAAwCJ,GAAU,c,yBCkBrDe,EAFcC,YAAkC,CAACC,KAAM,eAAzCD,EAjCsD,SAAC,GACnD,IAA5BE,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,QACf,OACI,uBAAMC,SAAUF,EAAhB,UACI,sBAAKG,UAAWC,IAAQC,kBAAxB,UACKC,YAAoC,YAAa,WAC9C,GAAIC,KACPD,YAAoC,sBAAuB,4BACxD,GAAIE,KACPF,YAAoC,WAAY,UAC7C,GAAIE,KACR,sBAAKC,MAAO,CAACC,QAAS,OAAQC,UAAW,aAAcC,UAAW,QAAlE,UACI,sBAAMH,MAAO,CAACI,QAAS,KAAMC,MAAO,SAApC,gCACCR,iBAAoCS,EAAW,iBAC5C,GAAIR,IAAO,CAACS,KAAM,gBAE1B,sBAAKP,MAAO,CAACE,UAAW,cAAxB,UACI,0CACCM,OAAOC,KAAKjB,EAAQkB,UAAUC,KAAI,SAAAC,GAC/B,OAAOf,YAAYe,EAAK,YAAcA,EAClC,GAAId,IAAO,CAACc,IAAKA,EAAKZ,MAAO,CAACa,aAAc,kBAI5D,qBAAKb,MAAO,CAACC,QAAS,OAAQa,cAAe,OAA7C,SACI,cAACC,EAAA,EAAD,CAAQV,MAAO,QAASW,OAAQ,OAAhC,iCCVVC,EAAkC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,aACpD,OAAO,8BACH,8BAAID,EAAJ,KAAmB,4BAAIC,UAIhBC,EA5B2B,SAAC,GAAc,IAAb5B,EAAY,EAAZA,QACxC,OACI,gCACI,oDAAsB,mBAAGQ,MAAO,CAACqB,cAAe,aAA1B,SAAyC7B,EAAQ8B,eAAiB,MAAQ,UAE/F9B,EAAQ8B,gBAAkB,sDAAwB,4BAAI9B,EAAQ+B,+BAC/D,2CAAa,4BAAI/B,EAAQgC,aACzB,sBAAKxB,MAAO,CAACa,aAAa,SAA1B,UACI,0CACCL,OACIC,KAAKjB,EAAQkB,UACbC,KAAI,SAAAC,GACL,OAAO,cAAC,EAAD,CAAoBM,aAAcN,EACxBO,aAAc3B,EAAQkB,SAASE,GACzBpB,EAAQkB,SAASE,GACjB,OAHDA,a,QCuC3Ba,EApD8B,SAAC,GAC6C,IAD5CjC,EAC2C,EAD3CA,QAASnB,EACkC,EADlCA,OAAQqD,EAC0B,EAD1BA,QAClBC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,cAAetD,EAAkB,EAAlBA,aAAkB,EAExDC,oBAAS,GAF+C,mBAEjFC,EAFiF,KAEvEC,EAFuE,KAetF,OAAKe,EAKD,sBAAKE,UAAWC,IAAQkC,YAAxB,UAEI,gCACI,qBAAKC,IAAK,YAAaC,IAA6B,MAAxBvC,EAAQwC,OAAOC,MAAgBzC,EAAQwC,OAAOC,MAAQC,MAClF,sBAAKxC,UAAWC,IAAQwC,YAAxB,UACI,qBAAKzC,UAAWC,IAAQyC,YAAxB,SACK5C,EAAQ6C,WAEb,qBAAKrC,MAAO,CAACG,UAAW,SAAxB,SACI,cAAC,EAAD,CAAwB7B,aAAcA,EAAcD,OAAQA,YAIvEqD,GACD,sBAAK1B,MAAO,CAACC,QAAS,QAAtB,UACI,sBAAKD,MAAO,CAACsC,YAAa,QAAS5C,UAAWC,IAAQ4C,YAAtD,UACI,cAACxB,EAAA,EAAD,CAAQV,MAAO,QAASW,OAAQ,OAAhC,0BACA,uBAAOT,KAAK,OAAO1B,SAjCP,SAACC,GAAsC,IAAD,GAC9D,UAAIA,EAAE0D,OAAOC,aAAb,aAAI,EAAgBC,SAChBf,EAAU7C,EAAE0D,OAAOC,MAAM,WAiCnBjE,GAAY,cAACuC,EAAA,EAAD,CAAQ4B,QAAS,WAC3BlE,GAAY,IACb4B,MAAO,QAASW,OAAQ,OAFb,6BAKjBxC,EACK,cAAC,EAAD,CAAiBiB,SAnCd,SAACmD,GACdhB,EAAcgB,GACdnE,GAAY,IAiCmCoE,cAAerD,EAASA,QAASA,IACtE,cAAC,EAAD,CAAaA,QAASA,OA9BzB,cAACsD,EAAA,EAAD,K,sDCVAC,EATa,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,cACnC,OACQ,sBAAKvD,UAAWC,IAAQuD,KAAxB,UACI,4BAAIF,IACJ,+BAAOC,Q,gBCOR5D,cAA0B,CAAEC,KAAM,WAAlCD,EAZ2C,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aACxD,OACI,uBAAME,SAAUF,EAAhB,UACKM,YAAqC,gBAAiB,cACvD,CAACsD,KAAWpD,KACZ,cAACgB,EAAA,EAAD,CAAQV,MAAO,MAAOW,OAAQ,OAA9B,4BC2BGoC,EAtBgBC,IAAMC,MAAK,YAAmB,IAAjBC,EAAgB,EAAhBA,WAGpCC,EAFcC,aAAY,SAAChG,GAAD,OAAyBA,EAAMoE,YAAY6B,aAE3C/C,KAC1B,SAACuC,GAAD,OAA0B,cAAC,EAAD,CACtBF,QAASE,EAAKF,QAASC,cAAeC,EAAKD,eAAoBC,EAAKS,OAO5E,OACI,sBAAKjE,UAAWC,IAAQiE,MAAxB,UACI,qBAAKlE,UAAWC,IAAQkE,SAAxB,SACI,cAAC,EAAD,CAAYpE,SAPP,SAACmD,GACdW,EAAWX,EAASkB,kBAQfN,QCLEO,EApBgB,SAAC,GAEuB,IAFtBrC,EAEqB,EAFrBA,QAASlC,EAEY,EAFZA,QAASnB,EAEG,EAFHA,OACfkF,EACkB,EADlBA,WAAY5B,EACM,EADNA,UAAWC,EACL,EADKA,cACvBtD,EAAkB,EAAlBA,aAChC,OAAKkB,EAKD,sBAAKE,UAAWC,IAAQH,QAAxB,UACI,cAAC,EAAD,CAAakC,QAASA,EAASlC,QAASA,EACpCnB,OAAQA,EAAQsD,UAAWA,EAC3BC,cAAeA,EAAetD,aAAcA,IAG/CoD,GAAWlC,GAAW,cAAC,EAAD,CAAS+D,WAAYA,OAVzC,cAACT,EAAA,EAAD,K,kCCmEAkB,4BAA6BC,IAAYrG,IAAzCoG,EApDyB,SAAC,GAAiC,IAAfE,EAAc,EAA/BC,MAAQC,OAASF,OAEjD1E,EAAUiE,aAAY,SAAChG,GAAD,OAAyBA,EAAMoE,YAAYrC,WACjEnB,EAASoF,aAAY,SAAChG,GAAD,OAAyBA,EAAMoE,YAAYxD,UAChEgG,EAAWZ,aAAY,SAAChG,GAAD,OAAyBA,EAAME,KAAKuG,UAE3DI,EAAWC,cAEXC,EAAiBC,uBAAY,WAC/B,IAAIC,EAAgBR,EAEfQ,IACDA,EAAgBL,GAEpBC,EAASK,YAAaD,IACtBJ,EAASM,YAAYF,MACtB,CAACR,EAAQI,EAAUD,IAEtBzF,qBAAU,WACN4F,MACD,CAACN,EAAQM,IAEZ,IAAMjB,EAAakB,uBAAY,SAACX,GAC5BQ,EAASO,IAAQC,QAAQhB,MAC1B,CAACQ,IAEE3C,EAAY8C,uBAAY,SAACM,GAC3BT,EAASU,YAAYD,MACtB,CAACT,IAEE1C,EAAgB6C,uBAAY,SAAC7B,GAC/B0B,EAASW,YAAcrC,MACxB,CAAC0B,IAEEhG,EAAemG,uBAAY,SAAC/F,GAC9B4F,EAASY,YAAexG,MACzB,CAAC4F,IAGJ,OACI,cAAC,EAAD,CACI5C,SAAUwC,EACV1E,QAASA,EACTnB,OAAQA,EACRkF,WAAYA,EACZ5B,UAAWA,EACXC,cAAeA,EACftD,aAAcA","file":"static/js/3.87e9215e.chunk.js","sourcesContent":["import React, {FC} from 'react'\nimport {connect,} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {appStateType} from \"../redux/redux-store\"\n\nlet mapStateToPropsForRedirect = (state: appStateType) => ({\n    isAuth: state.auth.isAuth\n} as mapPropsType)\n\ntype mapPropsType = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\n    const RedirectComponent: FC<mapPropsType> = (props) => {\n        const {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as WCP} />\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"ProfileInfo_profilePage__8Apdk\",\"profileInfo\":\"ProfileInfo_profileInfo__2IJgv\",\"profileName\":\"ProfileInfo_profileName__52BYI\",\"profile\":\"ProfileInfo_profile__2LHtf\",\"file_upload\":\"ProfileInfo_file_upload__2OfPh\",\"profileFormFields\":\"ProfileInfo_profileFormFields__1DjQL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\",\"formPost\":\"MyPosts_formPost__3MaxQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\"};","import React, {useState, useEffect, FC, ChangeEvent} from 'react'\n\ntype PropsType = {\n    status: string\n    updateStatus?: (statusValue: string) => void\n}\n\nconst ProfileStatusWithHooks: FC<PropsType> = ({status, updateStatus}) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [statusValue, setStatus] = useState(status);\n\n    useEffect( () => {\n        setStatus(status)\n    }, [status])\n\n    let activateEditMode = () => {\n        setEditMode(true);\n    };\n\n    let deactivateEditMode = () => {\n        setEditMode(false);\n        if (updateStatus) {\n            updateStatus(statusValue);\n        }\n    };\n\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    };\n\n    return (\n        <div>\n            { editMode\n                ? <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={statusValue}/>\n                : <span onDoubleClick={activateEditMode}>{status || '======'}</span>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;\n","import classes from \"./ProfileInfo.module.css\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../Common/formControls/formControls\";\nimport Button from \"../../Common/button/Button\";\nimport {ContactsType, ProfileType} from \"../../../types/types\";\nimport {FC} from \"react\";\n\ntype PropsType = {\n    profile: ProfileType\n}\n\ntype ProfileDataTypes = {\n    fullName: string\n    lookingForAJobDescription: string\n    aboutMe: string\n    lookingForAJob: boolean\n}\n\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = (\n    {handleSubmit, profile}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={classes.profileFormFields}>\n                {createField<DataFormValuesTypeKeys>('full name', \"fullName\",\n                    [], Input)}\n                {createField<DataFormValuesTypeKeys>('professional skills', \"lookingForAJobDescription\",\n                    [], Textarea)}\n                {createField<DataFormValuesTypeKeys>('about me', \"aboutMe\",\n                    [], Textarea)}\n                <div style={{display: 'flex', alignSelf: 'flex-start', marginTop: '10px'}}>\n                    <span style={{opacity: '.7', width: '300px'}}>Looking for a job:</span>\n                    {createField<DataFormValuesTypeKeys>(undefined, \"lookingForAJob\",\n                        [], Input, {type: 'checkbox'})}\n                </div>\n                <div style={{alignSelf: 'flex-start'}}>\n                    <h3>Contacts</h3>\n                    {Object.keys(profile.contacts).map(key => {\n                        return createField(key, 'contacts.' + key,\n                            [], Input, {key: key, style: {marginBottom: '5px'}})\n                    })}\n                </div>\n            </div>\n            <div style={{display: 'flex', flexDirection: 'row'}}>\n                <Button width={'160px'} height={'31px'}>Save Change</Button>\n            </div>\n        </form>\n    )\n}\n\ntype DataFormValuesTypeKeys = Extract<keyof ProfileDataTypes, string>\n\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({form: 'profileData'})(ProfileDataForm);\n\nexport default ProfileDataReduxForm","import {ContactsType, ProfileType} from \"../../../types/types\";\nimport React, {FC} from \"react\";\n\ntype ProfilePropsType = {\n    profile: ProfileType\n};\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst ProfileData: FC<ProfilePropsType> = ({profile}) =>{\n    return (\n        <div>\n            <p>Looking for a job: <b style={{textTransform: 'uppercase'}}>{profile.lookingForAJob ? 'Yes' : 'No'}</b>\n            </p>\n            {profile.lookingForAJob && <p>Professional skills: <b>{profile.lookingForAJobDescription}</b></p>}\n            <p>About me: <b>{profile.aboutMe}</b></p>\n            <div style={{marginBottom:'-10px'}}>\n                <h3>Contacts</h3>\n                {Object\n                    .keys(profile.contacts)\n                    .map(key => {\n                    return <Contacts key={key} contactTitle={key}\n                                     contactValue={profile.contacts[key as keyof ContactsType]\n                                         ? profile.contacts[key as keyof ContactsType]\n                                         : '==='}/>\n                })}\n            </div>\n        </div>\n    )\n};\n\nconst Contacts: FC<ContactsPropsType> = ({contactTitle, contactValue}) =>{\n    return <div>\n        <p>{contactTitle}: <b>{contactValue}</b></p>\n    </div>\n}\n\nexport default ProfileData\n","import {ChangeEvent, FC, useState} from 'react'\nimport classes from './ProfileInfo.module.css'\nimport userPhoto from '../../../assets/images/users.png'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\nimport Button from \"../../Common/button/Button\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport ProfileData from \"./ProfileData\";\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport {ProfilePageInfoType, ProfileType} from \"../../../types/types\";\n\nconst ProfileInfo: FC<ProfilePageInfoType> = ({profile, status, isOwner,\n                                              savePhoto, changeProfile, updateStatus}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            savePhoto(e.target.files[0]);\n        }\n    };\n\n    const onSubmit = (formData: ProfileType) => {\n        changeProfile(formData)\n        setEditMode(false)\n    };\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={classes.profilePage}>\n\n            <div>\n                <img alt={'mainPhoto'} src={profile.photos.small != null ? profile.photos.small : userPhoto}/>\n                <div className={classes.profileInfo}>\n                    <div className={classes.profileName}>\n                        {profile.fullName}\n                    </div>\n                    <div style={{marginTop: '-20px'}}>\n                        <ProfileStatusWithHooks updateStatus={updateStatus} status={status}/>\n                    </div>\n                </div>\n            </div>\n            {isOwner &&\n            <div style={{display: 'flex'}}>\n                <div style={{marginRight: '10px'}} className={classes.file_upload}>\n                    <Button width={'150px'} height={'30px'}>Change photo</Button>\n                    <input type=\"file\" onChange={onMainPhotoSelected}/>\n                </div>\n                {!editMode && <Button onClick={() => {\n                    setEditMode(true)\n                }} width={'160px'} height={'31px'}>Edit profile</Button>}\n            </div>\n            }\n            {editMode\n                ? <ProfileDataForm onSubmit={onSubmit} initialValues={profile} profile={profile}/>\n                : <ProfileData profile={profile}/>}\n        </div>\n    )\n}\n\nexport default ProfileInfo","import classes from './Post.module.css'\nimport {FC} from \"react\";\n\ntype PropsType = {\n    message: string\n    publishedTime: string\n}\n\nconst Post: FC<PropsType> = ({message, publishedTime}) => {\n    return (\n            <div className={classes.post}>\n                <p>{message}</p>\n                <span>{publishedTime}</span>\n            </div>\n    );\n}\n\nexport default Post","import {reduxForm, InjectedFormProps} from \"redux-form\";\nimport {createField, Textarea} from \"../../Common/formControls/formControls\";\nimport {required} from \"../../../utils/validators\";\nimport Button from \"../../Common/button/Button\";\nimport React, {FC} from \"react\";\nimport {PostObjectType} from \"./MyPosts\";\n\nconst MyPostForm: FC<InjectedFormProps<PostObjectType>> = ({handleSubmit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<MyPostFormValueTypeKeys>('What happens?', \"newPostText\",\n            [required], Textarea)}\n            <Button width={'20%'} height={'40px'}>Add post</Button>\n        </form>\n    )\n};\n\ntype MyPostFormValueTypeKeys = Extract<keyof { newPostText: string }, string>\n\nexport default reduxForm<PostObjectType>({ form: 'myPosts' })(MyPostForm);\n","import React, {FC} from 'react'\nimport classes from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport {useSelector} from \"react-redux\";\nimport MyPostForm from \"./MyPostsForm\";\nimport {appStateType} from \"../../../redux/redux-store\";\n\nexport type PostObjectType = {\n    message: string\n    publishedTime: string\n    id: number\n}\n\ntype PropsType = {\n    addNewPost: (newPostText: string) => void\n}\n\nconst MyPosts: FC<PropsType> = React.memo(({addNewPost}) => {\n    const PostsData = useSelector((state: appStateType) => state.profilePage.PostsData);\n\n    let PostsElements = PostsData.map(\n        (post: PostObjectType) => <Post\n            message={post.message} publishedTime={post.publishedTime} key={post.id}/>\n    );\n\n    const onSubmit = (formData: any) => {\n        addNewPost(formData.newPostText);\n    };\n\n    return (\n        <div className={classes.posts}>\n            <div className={classes.formPost}>\n                <MyPostForm onSubmit={onSubmit}/>\n            </div>\n            {PostsElements}\n        </div>\n    );\n});\n\nexport default MyPosts","import ProfileInfo from './ProfileInfo/ProfileInfo';\nimport classes from './Profile.module.css'\nimport Preloader from \"../Common/Preloader/Preloader\";\nimport MyPosts from \"./MyPosts/MyPosts\";\nimport {FC} from \"react\";\nimport {ProfilePageInfoType} from \"../../types/types\";\n\ntype PropsType = ProfilePageInfoType & {addNewPost: (newPostText: string) => void}\n\nconst Profile: FC<PropsType> = ({isOwner, profile, status,\n                                    addNewPost, savePhoto, changeProfile,\n                                    updateStatus}) => {\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div className={classes.profile}>\n            <ProfileInfo isOwner={isOwner} profile={profile}\n                status={status} savePhoto={savePhoto}\n                changeProfile={changeProfile} updateStatus={updateStatus}\n            />\n\n            {isOwner && profile && <MyPosts addNewPost={addNewPost} />}\n\n        </div>\n    );\n}\n\nexport default Profile","import React, {useEffect, useCallback, FC} from 'react';\nimport Profile from './Profile';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    actions,\n    getProfileTC,\n    getStatusTC,\n    savePhotoTC,\n    saveProfileTC,\n    updateStatusTC\n} from '../../redux/profileReducer';\nimport {withRouter} from 'react-router-dom';\nimport {compose} from 'redux';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\nimport {appStateType} from \"../../redux/redux-store\";\nimport {ProfileType} from \"../../types/types\";\n\ntype MatchType = {\n    params: {userId: number}\n    isExact: boolean\n    path: string\n    url: string\n};\n\ntype PropsType = {\n    match: MatchType\n};\n\nconst ProfileContainer: FC<PropsType> = ({match: {params: {userId}}}) => {\n\n    const profile = useSelector((state: appStateType) => state.profilePage.profile)\n    const status = useSelector((state: appStateType) => state.profilePage.status)\n    const myUserId = useSelector((state: appStateType) => state.auth.userId)\n\n    const dispatch = useDispatch();\n\n    const refreshProfile = useCallback(() => {\n        let currentUserId = userId;\n\n        if (!currentUserId) {\n            currentUserId = myUserId;\n        }\n        dispatch(getProfileTC(currentUserId));\n        dispatch(getStatusTC(currentUserId));\n    }, [userId, dispatch, myUserId]);\n\n    useEffect(() => {\n        refreshProfile()\n    }, [userId, refreshProfile]);\n\n    const addNewPost = useCallback((newPostText: string) => {\n        dispatch(actions.addPost(newPostText));\n    }, [dispatch]);\n\n    const savePhoto = useCallback((file: any) => {\n        dispatch(savePhotoTC(file));\n    }, [dispatch]);\n\n    const changeProfile = useCallback((formData: ProfileType) => {\n        dispatch(saveProfileTC(formData));\n    }, [dispatch]);\n\n    const updateStatus = useCallback((statusValue: string) => {\n        dispatch(updateStatusTC(statusValue));\n    }, [dispatch]);\n\n\n    return (\n        <Profile\n            isOwner={!userId}\n            profile={profile}\n            status={status}\n            addNewPost={addNewPost}\n            savePhoto={savePhoto}\n            changeProfile={changeProfile}\n            updateStatus={updateStatus}\n        />\n    );\n};\n\nexport default compose<React.ComponentType>(withRouter, withAuthRedirect)(ProfileContainer);"],"sourceRoot":""}