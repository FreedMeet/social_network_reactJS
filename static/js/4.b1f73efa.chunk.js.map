{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Dialogs.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogsItem","path","id","className","classes","dialog","activeClassName","activeLink","name","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Button","width","height","compose","useSelector","messagePage","MessageData","DialogsData","dispatch","useDispatch","dialogs","dialogsItem","map","messages","messagesItem","message","formData","sendMessageAC","newMessageText"],"mappings":"4OAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,4JAEvC,WACI,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAStC,OAFiCM,YAAQX,EAARW,CAAoCL,K,oBCfzEM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,WAAa,4BAA4B,aAAe,8BAA8B,SAAW,0BAA0B,KAAO,wB,qFCezMC,EAbK,SAACN,GAEjB,IAAIO,EAAO,YAAcP,EAAMQ,GAE/B,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SACI,cAAC,IAAD,CAASV,GAAIM,EAAMK,gBAAiBF,IAAQG,WAA5C,SACKb,EAAMc,U,4ECejBC,EAAmBC,YAAU,CAACC,KAAM,WAAjBD,EAdL,SAAChB,GACjB,OACI,uBAAMS,UAAWC,IAAQO,KAAMC,SAAUlB,EAAMmB,aAA/C,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,mBACZP,KAAM,iBACNQ,UAAWC,IACXC,SAAUC,MACd,cAACC,EAAA,EAAD,CAAQC,MAAO,MAAOC,OAAQ,QAA9B,wBAkDGC,4BAAQjC,IAARiC,EA1CC,SAAC7B,GAAW,IAAD,EAEY8B,aAC/B,SAAArC,GAAK,MACD,CACIA,EAAMsC,YAAYC,YAClBvC,EAAMsC,YAAYE,gBANP,mBAEhBD,EAFgB,KAEHC,EAFG,KASjBC,EAAWC,cAMjB,OACI,8BACI,sBAAK1B,UAAWC,IAAQ0B,QAAxB,UAEI,qBAAK3B,UAAWC,IAAQ2B,YAAxB,SACKJ,EAAYK,KACT,SAAA3B,GAAM,OAAI,cAAC,EAAD,CAAaG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,IAASG,EAAOH,SAI7E,sBAAKC,UAAWC,IAAQ6B,SAAxB,UAEI,qBAAK9B,UAAWC,IAAQ8B,aAAxB,SACKR,EAAYM,KACT,SAAAG,GAAO,OAAI,qBAAsBhC,UAAWC,IAAQ+B,QAAzC,SAAmDA,EAAQA,SAAjDA,EAAQjC,SAIrC,cAACO,EAAD,CAAkBG,SAtBjB,SAACwB,GACdR,EAASS,YAAcD,EAASE","file":"static/js/4.b1f73efa.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={'/login'} />;\n            return <Component {...this.props} />\n        };\n    };\n\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n    return ConnectedRedirectComponent;\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"activeLink\":\"Dialogs_activeLink__34w6e\",\"messagesItem\":\"Dialogs_messagesItem__FCeL0\",\"messages\":\"Dialogs_messages__1w_Up\",\"form\":\"Dialogs_form__1EQXf\"};","import { NavLink } from 'react-router-dom';\nimport classes from './../Dialogs.module.css';\n\nconst DialogsItem = (props) => {\n\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={classes.dialog}>            \n            <NavLink to={path} activeClassName={classes.activeLink}>\n                {props.name}\n            </NavLink>\n        </div>\n    );\n};\n\nexport default DialogsItem;","import classes from './Dialogs.module.css';\nimport DialogsItem from './DialogsItem/DialogsItem';\nimport {Field, reduxForm} from 'redux-form';\nimport {Textarea} from '../Common/formControls/formControls';\nimport {required} from '../../utils/validators'\nimport Button from \"../Common/button/Button\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {sendMessageAC} from \"../../redux/dialogsReducer\";\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nconst DialogsForm = (props) => {\n    return (\n        <form className={classes.form} onSubmit={props.handleSubmit}>\n            <Field\n                placeholder='You`r message...'\n                name={'newMessageText'}\n                component={Textarea}\n                validate={required}/>\n            <Button width={'10%'} height={'104px'}>send</Button>\n        </form>\n    );\n};\n\n\nconst DialogsReduxForm = reduxForm({form: 'dialogs'})(DialogsForm);\n\nconst Dialogs = (props) => {\n\n    const [MessageData, DialogsData] = useSelector(\n        state =>\n            [\n                state.messagePage.MessageData,\n                state.messagePage.DialogsData\n            ]);\n\n    const dispatch = useDispatch();\n\n    const onSubmit = (formData) => {\n        dispatch(sendMessageAC(formData.newMessageText));\n    };\n\n    return (\n        <div>\n            <div className={classes.dialogs}>\n\n                <div className={classes.dialogsItem}>\n                    {DialogsData.map(\n                        dialog => <DialogsItem name={dialog.name} id={dialog.id} key={dialog.id}/>\n                    )}\n                </div>\n\n                <div className={classes.messages}>\n\n                    <div className={classes.messagesItem}>\n                        {MessageData.map(\n                            message => <div key={message.id} className={classes.message}>{message.message}</div>\n                        )}\n                    </div>\n\n                    <DialogsReduxForm onSubmit={onSubmit}/>\n\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default compose(withAuthRedirect)(Dialogs);"],"sourceRoot":""}