{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Pages/ChatPage/ChatPageForm.module.css","components/Pages/ChatPage/ChatPage.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","Chat","dispatch","useDispatch","status","useSelector","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","className","classes","messageBlock","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","memo","myLogin","login","messageHeader","src","photo","alt","userName","messageBody","setMessage","form","placeholder","onChange","value","width","height","disabled","onClick","sendMessage","compose"],"mappings":"0MAKIA,EAA6B,SAACC,GAAD,MAA0B,CACvDC,OAAQD,EAAME,KAAKD,SAOhB,SAASE,EAAsBC,GAOlC,OAAOC,YAAQN,EAARM,EANqC,SAACC,GAAW,IAC7CL,EAAwBK,EAAxBL,OAAWM,EADiC,YACpBD,EADoB,YAEnD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,oBCf1CC,EAAOC,QAAU,CAAC,KAAO,2BAA2B,aAAe,mCAAmC,cAAgB,oCAAoC,YAAc,kCAAkC,QAAU,gC,uICc9MC,EAAW,WACb,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACf,GAAD,OAAyBA,EAAMgB,KAAKF,UAS/D,OAPAG,qBAAU,WAEN,OADAL,EAASM,eACF,WACHN,EAASO,kBAEd,IAGC,gCACgB,UAAXL,GAAsB,+EACvB,qCACI,cAACM,EAAD,IACA,cAACC,EAAD,WAMVD,EAAe,WACjB,IAAME,EAAWP,aAAY,SAACf,GAAD,OAAyBA,EAAMgB,KAAKM,YAC3DC,EAAoBC,iBAAuB,MAF1B,EAGiBC,oBAAS,GAH1B,mBAGhBC,EAHgB,KAGFC,EAHE,KAoBvB,OANAV,qBAAU,WACa,IAAD,EAAdS,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAGA,sBAAKS,UAAWC,IAAQC,aAAcC,SAhBpB,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKL,EAASqB,KAAI,SAACC,GAAD,OAAwB,cAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,OACtD,qBAAKC,IAAKzB,QAMhBsB,EAA4CI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QACrDK,EAAUpC,aAAY,SAACf,GAAD,OAAyBA,EAAME,KAAKkD,SAEhE,OAAO,sBAAKrB,UAAWC,IAAQc,QAAxB,UACH,sBAAKf,UAAWC,IAAQqB,cAAxB,UACI,qBAAKC,IAAKR,EAAQS,MAAOC,IAAI,KAC5BV,EAAQW,WAAaN,EAChB,+BAAOL,EAAQW,WACf,iCAAOX,EAAQW,SAAS,4CAGlC,mBAAG1B,UAAWC,IAAQ0B,YAAtB,SAAoCZ,EAAQA,UAC5C,6BAKFzB,EAAqB,WAAO,IAAD,EACCI,mBAAS,IADV,mBACtBqB,EADsB,KACba,EADa,KAEvB/C,EAAWC,cACXC,EAASC,aAAY,SAACf,GAAD,OAAyBA,EAAMgB,KAAKF,UAU/D,OAAO,mCACH,sBAAKiB,UAAWC,IAAQ4B,KAAxB,UACI,0BAAUC,YAAa,kBACbC,SAAU,SAAC3B,GAAD,OAAyCwB,EAAWxB,EAAEE,cAAc0B,QAC9EA,MAAOjB,IACjB,cAAC,IAAD,CAAQkB,MAAO,QAASC,OAAQ,QAASC,SAAqB,UAAXpD,EAC3CqD,QAdW,WAClBrB,IAGLlC,EAASwD,YAAYtB,IACrBa,EAAW,MAQP,wBAMGU,4BAAQlE,IAARkE,EAlGM,WACjB,OACI,cAAC1D,EAAD","file":"static/js/5.79bd3fbb.chunk.js","sourcesContent":["import React, {FC} from 'react'\nimport {connect,} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {appStateType} from \"../redux/redux-store\"\n\nlet mapStateToPropsForRedirect = (state: appStateType) => ({\n    isAuth: state.auth.isAuth\n} as mapPropsType)\n\ntype mapPropsType = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<WCP>(Component: React.ComponentType<WCP>) {\n    const RedirectComponent: FC<mapPropsType> = (props) => {\n        const {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as WCP} />\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ChatPageForm_form__3bpCY\",\"messageBlock\":\"ChatPageForm_messageBlock__1oJaD\",\"messageHeader\":\"ChatPageForm_messageHeader__1i2BD\",\"messageBody\":\"ChatPageForm_messageBody__CZ6er\",\"message\":\"ChatPageForm_message__3iDxG\"};","import React, {ChangeEvent, FC, useEffect, useRef, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {appStateType} from \"../../../redux/redux-store\"\nimport {ChatMessageType, sendMessage, startMessagesListening, stopMessagesListening} from \"../../../redux/chatReducer\";\nimport Button from \"../../Common/button/Button\";\nimport classes from './ChatPageForm.module.css'\nimport {compose} from \"redux\";\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\n\nconst ChatPage: FC = () => {\n    return (\n        <Chat/>\n    )\n}\n\nconst Chat: FC = () => {\n    const dispatch = useDispatch()\n    const status = useSelector((state: appStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return (\n        <div>\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\n            <>\n                <Messages/>\n                <AddMessageForm/>\n            </>\n        </div>\n    )\n}\n\nconst Messages: FC = () => {\n    const messages = useSelector((state: appStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget;\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return (\n        <div className={classes.messageBlock} onScroll={scrollHandler}>\n            {messages.map((m: ChatMessageType) => <Message key={m.id} message={m}/>)}\n            <div ref={messagesAnchorRef}/>\n        </div>\n    )\n}\n\n\nconst Message: FC<{ message: ChatMessageType }> = React.memo(({message}) => {\n    const myLogin = useSelector((state: appStateType) => state.auth.login)\n\n    return <div className={classes.message}>\n        <div className={classes.messageHeader}>\n            <img src={message.photo} alt=''/>\n            {message.userName !== myLogin\n                ? <span>{message.userName}</span>\n                : <span>{message.userName}<b>(You)</b></span>\n            }\n        </div>\n        <p className={classes.messageBody}>{message.message}</p>\n        <hr/>\n    </div>\n})\n\n\nconst AddMessageForm: FC = () => {\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n    const status = useSelector((state: appStateType) => state.chat.status)\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <>\n        <div className={classes.form}>\n            <textarea placeholder={'Your message...'}\n                      onChange={(e: ChangeEvent<HTMLTextAreaElement>) => setMessage(e.currentTarget.value)}\n                      value={message}/>\n            <Button width={'100px'} height={'100px'} disabled={status !== 'ready'}\n                    onClick={sendMessageHandler}>Send</Button>\n        </div>\n    </>\n}\n\nexport default compose(withAuthRedirect)(ChatPage);\n"],"sourceRoot":""}